alias functionNum R1;
alias currentPID R2;

if (functionNum == TERMINAL_WRITE) then
    alias word R3;
    
    multipush(R1,R2,R3);
    R1 = ACQUIRE_TERMINAL; 
    R2 = currentPID;
    call RESOURCE_MANAGER; // MOD_0
    multipop(R1,R2,R3);

    print word;
    
    multipush(R1,R2,R3);
    R1 = RELEASE_TERMINAL; 
    R2 = currentPID;
    call RESOURCE_MANAGER; // MOD_0
    multipop(R1,R2,R3);

endif;





// Terminal read function
if (functionNum == TERMINAL_READ) then
    alias logicalAddressOfWord R3;
    
    multipush(R1,R2,R3);
    R1 = ACQUIRE_TERMINAL;
    R2 = currentPID;
    call RESOURCE_MANAGER; // MOD_0
    multipop(R1,R2,R3);
    
    read;
    [PROCESS_TABLE+currentPID*16 +4 ] = WAIT_TERMINAL;
    
    multipush(R1,R2,R3);
    call SCHEDULER;
    multipop(R1,R2,R3);

    alias physicalAddress R4;
    physicalAddress = [PTBR + 2*((logicalAddressOfWord)/512)] * 512 + ((logicalAddressOfWord)%512);
    [physicalAddress] = [PROCESS_TABLE+ [SYSTEM_STATUS_TABLE+1]*16+8];

endif;





if (functionNum == DISK_LOAD) then
    
    alias pgNo R3;
    alias blockNo R4;
    multipush(R1,R2,R3,R4);
    R1 = ACQUIRE_DISK;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4);

    
    [DISK_STATUS_TABLE + 1] = 0;	//LOAD
    [DISK_STATUS_TABLE + 2] = pgNo;
    [DISK_STATUS_TABLE + 3] = blockNo;
    
    load(pgNo, blockNo);
    
    [PROCESS_TABLE + currentPID*16 + 4 ] = WAIT_DISK;

    // call scheduler
    multipush(R1,R2,R3,R4);
    call SCHEDULER;
    multipop(R1,R2,R3,R4);

endif;





if(functionNum ==  DISK_STORE) then
    alias pgNo R3;
    alias blockNo R4;

    multipush(R1,R2,R3,R4);
    R1 = ACQUIRE_DISK;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4);

    [DISK_STATUS_TABLE + 1] = 1;	//STORE
    [DISK_STATUS_TABLE + 2] = pgNo;
    [DISK_STATUS_TABLE + 3] = blockNo;
    
    store(pgNo, blockNo);

    [PROCESS_TABLE + currentPID*16 + 4 ] = WAIT_DISK;

    // call scheduler
    multipush(R1,R2,R3,R4);
    call SCHEDULER;
    multipop(R1,R2,R3,R4);
    

endif;

return;
