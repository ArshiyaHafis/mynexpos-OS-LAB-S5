//load exception handler
loadi(2, 15);
loadi(3, 16);

//load the timer interupt routine
loadi(4, 17);
loadi(5, 18);

//load disk interrupt
loadi(6, 19);
loadi(7, 20);

//load console interrupt
loadi(8,21);
loadi(9,22);

//load INT4
loadi(10,23);
loadi(11,24);

//load int 5
loadi(12,25);
loadi(13,26);

//load INT 6
loadi(14,27);
loadi(15,28);

//load int7
loadi(16,29);
loadi(17,30);

//load int8
loadi(18,31);
loadi(19,32);

//load int 9
loadi(20,33);
loadi(21,34);

//load int10 module
loadi(22,35);
loadi(23,36);

//int11
loadi(24,37);
loadi(25,38);


//int12
loadi(26,39);
loadi(27,40);


//int 13
loadi(28,41);
loadi(29,42);

//int 14
loadi(30,43);
loadi(31,44);

//int 15
loadi(32,45);
loadi(33,46);

//int16 
loadi(34,47);
loadi(35,48);

//int17
loadi(36,49);
loadi(37,50);

//module 0
loadi(40, 53);
loadi(41, 54);

// load  module 1, 
loadi(42, 55);
loadi(43, 56);

// load module 2 
loadi(44, 57 );
loadi(45, 58 );

// load module 3
loadi(46,59);
loadi(47,60);


//module 4
loadi(48, 61);
loadi(49, 62);

//scheduler - mod5
loadi(50,63);
loadi(51,64);


//load inode table
loadi(59,3);
loadi(60,4);

//load disk map table
loadi(61, 2);

//load root file
loadi(62,5);

//load library code form disk to memory
loadi(63,13);
loadi(64,14);

//load init program
loadi(65,7);

//shell process
loadi(67,9);
loadi(68,10);

//all processes terminated
alias iter R0;
iter = 0;
while(iter<MAX_PROC_NUM) do
    [PROCESS_TABLE +16*iter+ 4] = TERMINATED;
    iter=iter+1;
endwhile;




// ------------------------------------------>INIT  1 LOGIN<-----------------------------------------------------
PTBR = PAGE_TABLE_BASE+20; 
PTLR =  10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0110";
[PTBR+6] = -1;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 66;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

alias pTable R1;
pTable = PROCESS_TABLE + 16*1;


[pTable+ 1] = 1;
[pTable+ 4] = CREATED; 
[pTable+ 11] = 77;
[pTable+ 12] = 0;
[pTable+ 13] = 8*512;
[pTable+ 14] = PAGE_TABLE_BASE+20;
[pTable+ 15] = 10; 
[66*512] = [65*512+1];


// -------------------------------------------------------------------------->SHELL<---------------------------------------------------------------------
PTBR = PAGE_TABLE_BASE+40; //29696+20 = 29716
PTLR =  10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 67;
[PTBR+9] = "0100";
[PTBR+10] = 68;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 78;
[PTBR+17] = "0110";
[PTBR+18] = 79;
[PTBR+19] = "0110";



pTable =  PROCESS_TABLE + 16*2;
[pTable+2] = 1; // PPID
[pTable+ 1] = 2;// PID
[pTable+ 4] = TERMINATED; 
[pTable+ 11] = 80;
[pTable+ 12] = 0;
[pTable+ 13] = 8*512;
[pTable+ 14] = PAGE_TABLE_BASE+40;
[pTable+ 15] = 10;


[78*512] = [67*512+1];


//DISK MAP TABLE
alias i R0;
i = 0;
while(i < 10)do
    [DISK_MAP_TABLE+2*10+i] = -1;
    i = i + 1;
endwhile;

//per-process resource table 
alias pprTable R2;
i = 0;
while(i < 16) do

    pprTable = (([pTable + 11] + 1) * 512 ) +  -16+2*i;
	[pprTable] = -1;

	i = i + 1;
endwhile;


alias dmTable R3;
dmTable = DISK_MAP_TABLE + 2*10;
[dmTable+4] = 9;
[dmTable+5] = 10;


[TERMINAL_STATUS_TABLE] = 0;

i = 0;

while(i < 81)do
    [MEMORY_FREE_LIST+i] = 1;
    [SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3]  - 1;
    i = i + 1;
endwhile; 

while(i < MAX_MEM_PAGE)do
    [MEMORY_FREE_LIST+i] = 0;
    i = i + 1;
endwhile; 


[SYSTEM_STATUS_TABLE+3] = 0; 
[SYSTEM_STATUS_TABLE+2] = 47; 


[DISK_STATUS_TABLE] =0;

// semaphore table
i = 0;
while(i < MAX_SEM_COUNT) do // 32
    [SEMAPHORE_TABLE + 4*i] = -1; // LOCKING PID
    [SEMAPHORE_TABLE + 4*i+1] = 0; // PROCESS i
    i = i + 1;
endwhile;


//file status table
i = 0;
while(i < MAX_FILE_NUM) do // 32
    [FILE_STATUS_TABLE + 4*i] = -1; // LOCKING PID
    [FILE_STATUS_TABLE + 4*i+1] = -1; // FILE OPEN i
    i = i + 1;
endwhile;

//buffer table
i = 0;
while(i < MAX_BUFFER) do
    [BUFFER_TABLE + 4*i] = -1; // BLOCK NUMBER
    [BUFFER_TABLE + 4*i+1] = 0; // DIRTY BIT
    [BUFFER_TABLE + 4*i+2] = -1; // LOCKING PID
    i = i + 1;
endwhile;

[PROCESS_TABLE + 16*1+ 3] = 1; 


// open file table 
i = 0;
while(i < MAX_OPENFILE_NUM) do
    [OPEN_FILE_TABLE + 4*i] = -1; // INODE INDEX
    [OPEN_FILE_TABLE + 4*i+1] = 0; // OPEN INSTANCE i
    i = i + 1;
endwhile;

return;
