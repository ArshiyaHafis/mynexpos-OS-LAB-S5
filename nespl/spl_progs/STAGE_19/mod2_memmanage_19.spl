alias functionNum R1;

if(functionNum == 1) then						//get free page
    [SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3] + 1;
    while([SYSTEM_STATUS_TABLE+2] == 0)do
    
        [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4] = WAIT_MEM;
        multipush(R1,R2);    
        call SCHEDULER;
        multipop(R1,R2);
    endwhile;

    [SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]  - 1;
    [SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3]  - 1;


    alias i R3;
    i = 0;
    while( [MEMORY_FREE_LIST + i ] != 0 &&  i < NUM_MEM_PAGES )do
        i = i + 1;
    endwhile;

    [MEMORY_FREE_LIST + i ] = 1;

    R0=i;


endif;


if(functionNum ==  2) then						//release page
    alias pgNo R2;
    [MEMORY_FREE_LIST+pgNo] = [MEMORY_FREE_LIST+pgNo]-1;
    
    if([MEMORY_FREE_LIST+pgNo] == 0) then
        [SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2] + 1;
    endif;

    
    alias i R3;
    i = 0;
    while(i < 16)do
        if([PROCESS_TABLE+i*16+4] == WAIT_MEM)then
            [PROCESS_TABLE+i*16+4] = READY;
        endif;
        i = i + 1;
       
    endwhile;
 
endif;

if(functionNum ==  4) then
    alias bNo R2;
    [DISK_FREE_LIST + bNo] = [DISK_FREE_LIST + bNo] - 1;

endif;



if (functionNum == 5)then
    alias retPageNo R0;
    alias BlockNo R2;
    alias currentPID R3;

    alias i R5;
    alias j R6;
    i=0;
    while( i < MAX_PROC_NUM )do
        j=0;
        while( j < 10 )do
            if ( [DISK_MAP_TABLE + 10*i + j] == BlockNo && (j == 4 || j == 5 || j==6 || j== 7) )then 
                if ( [[PROCESS_TABLE + (i * 16) + 14] + 2 * j] != -1 )then
                    R0 = [[PROCESS_TABLE + (i * 16) + 14] + 2 * j];
                    [MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1; 
                    return;
                endif;
            endif;
            j = j + 1;
        endwhile;
        i = i + 1;
    endwhile;
    
    

    multipush(R1,R2,R3,R4,R5,R6);
    R1 = 1;
    call MEMORY_MANAGER;
    retPageNo = R0;
    multipop(R1,R2,R3,R4,R5,R6);
    
    
    multipush(R0,R1,R2,R3,R4,R5,R6);
    R1 = 2;
    R4 = BlockNo;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = retPageNo;
    call DEVICE_MANAGER;
    multipop(R0,R1,R2,R3,R4,R5,R6);

    R0 = retPageNo;
    // breakpoint;
endif;

return;
