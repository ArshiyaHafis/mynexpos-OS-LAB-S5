alias functionNo R1;
alias currentPID R2;

if(functionNo == 2) then
	alias userAreapg R3;
	userAreapg = [PROCESS_TABLE + (currentPID * 16) + 11];
	
	multipush(R1,R2);
	R1 = 2;
	R2 = userAreapg;
	call MOD_2;
	multipop(R1,R2);
	
	return;
	
endif;


//exit process
if(functionNo == 3) then
	multipush(R1,R2);
	R1 = 4;
	R2 = currentPID;
	call MOD_1;
	multipop(R1,R2);
	
	
	multipush(R1,R2);
	R1 = 2;
	R2 = currentPID;
	call MOD_1;
	multipop(R1,R2);
	
	[PROCESS_TABLE + (currentPID * 16) + 4] = TERMINATED;
	return;
	
endif;


//free page table
if(functionNo == 4) then
	alias ptbr R3;
	ptbr = [PROCESS_TABLE + currentPID*16 + 14];
	[ptbr + 0] = -1;
	[ptbr + 1] = "0000";
	[ptbr + 2] = -1;
	[ptbr + 3] = "0000";
	
	alias i R4;
	i=4;
	while(i<20) do
		if([ptbr + i]!=-1) then
			multipush(R1, R2, R3, R4);
			R1=2;
			R2 = [ptbr + i];
			call MOD_2;
			multipop(R1, R2, R3, R4);
			
			[ptbr + i] = -1;
			[ptbr + i + 1] = "0000";
		endif;
		i=i+2;
	endwhile;
	
	alias disk_entry R5;
	disk_entry = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10;
	i=2;
	while(i <4) do
		if([disk_entry + i] != -1) then
			multipush(R0,R1,R2,R3,R4,R5);
			R1 = 4;
			R2 = [disk_entry + i];
			call MOD_2;
			multipop(R0,R1,R2,R3,R4,R5);
		endif;
		i = i + 1;
	endwhile;
	
	[disk_entry + 0] = -1;
	[disk_entry + 1] = -1;
	[disk_entry + 2] = -1;
	[disk_entry + 3] = -1;
	[disk_entry + 4] = -1;
	[disk_entry + 5] = -1;
	[disk_entry + 6] = -1;
	[disk_entry + 7] = -1;
	[disk_entry + 8] = -1;
	[disk_entry + 9] = -1;
	return;
endif;

