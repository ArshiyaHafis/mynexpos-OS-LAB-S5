alias userSP R1;
alias sysCallNo R2;
alias pTable R3;

pTable = PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16;
[pTable + 13]= SP;

SP = [pTable + 11] * 512  - 1 ;
PTBR = [pTable + 14] ;

userSP = [pTable + 13];
sysCallNo = [[PTBR + 2*((userSP-5)/512)] * 512 + ((userSP-5)%512)] ;
[pTable + 9] = sysCallNo;

alias fileNd R4;
fileNd  = [[PTBR + 2*((userSP-4)/512)] * 512 + ((userSP-4)%512)] ;

alias returnAddress R5;
returnAddress = [PTBR + 2*((userSP-1)/512)] * 512 + ((userSP-1)%512) ;

if(sysCallNo == 2) then 					//  Open
    alias fileName R4;
    alias pprTable R6;
    alias freeEntry R7;
    alias i R8;
    pprTable = [pTable + 11] * 512 + RESOURCE_TABLE_OFFSET;
    i = 0;
    freeEntry = -1;
    while(i < 8) do 
        if([pprTable + 2*i] == -1) then
            freeEntry = i;
            break;
        endif;
        i = i + 1;
    endwhile;

    if(freeEntry == -1) then					//ppr table is full
            [returnAddress] = -3;
            [pTable + 9] = 0;
            SP = [pTable + 13];
            ireturn;
    endif;


    multipush(R1,R2,R3,R4,R5,R6,R7);				//open function in file manager module
    R1 = OPEN;
    R2 = fileName;
    call MOD_3;
    multipop(R1,R2,R3,R4,R5,R6,R7);

    if(R0 == -1 || R0 == -2 || R0 == -3) then			//error codes
            [returnAddress] = R0;
            [pTable + 9] = 0;
            SP = [pTable + 13];
            ireturn;
    endif;

    [pprTable + 2*freeEntry] = FILE;			// set ppr Table with entries
    [pprTable + 2*freeEntry + 1] = R0;

    [returnAddress] = freeEntry;
endif;

if(sysCallNo == 3) then 				// Close
    alias fd R4;
    if(fd < 0 || fd > 7) then
            [returnAddress] = -1;
            [pTable + 9] = 0;
            SP = [pTable + 13];
            ireturn;
    endif;

    alias pprTableEntry R6;							//get per process resource entry
    pprTableEntry = [pTable + 11] * 512 + RESOURCE_TABLE_OFFSET+ 2*fd;
 
    if([pprTableEntry] != FILE) then
            [returnAddress] = -1;
            [pTable + 9] = 0;
            SP = [pTable + 13];
            ireturn;
    endif;

    multipush(R1,R2,R3,R4,R5,R6,R7);						//call CLOSE in file manager module
    R1 = CLOSE;
    R2 = [pprTableEntry+1];
    call MOD_3;
    multipop(R1,R2,R3,R4,R5,R6,R7);

    [pprTableEntry] = -1;							//invalidate per process resource entry
    [returnAddress] = 0;
endif;

[pTable + 9] = 0;
SP = [pTable + 13];
ireturn;
