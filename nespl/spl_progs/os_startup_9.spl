//load library code form disk to memory
loadi(63,13);
loadi(64,14);

//load init program
loadi(65,7);
loadi(66,8);


//load int10 module
loadi(22,35);
loadi(23,36);


//load exception handler
loadi(2, 15);
loadi(3, 16);


//load the timer interupt routine
loadi(4, 17);
loadi(5, 18);

//PROCESS TABLE				SPL constant for PROCESS_TABLE = 28672 (starting address)
[PROCESS_TABLE + 11] = 80;		//Set user area page (first available free page is 80)
[PROCESS_TABLE + 1] = 0;		//first process initialized to 0
[SYSTEM_STATUS_TABLE + 1] = 0;		//PID is maintained



PTBR = PAGE_TABLE_BASE;
PTLR = 10;		//since we need pages until 0-8, we specify atleast 9 pages



//library - page 0 and 1
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap - page 2 and 3
[PTBR+4] = -78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//page 4 and 5 - code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";

[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";


//page 8 and 9- stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


[76*512] = [65 * 512 + 1];	// points to first instruction in 2nd line in the 4th page to start code
SP = 8*512;		//point to stack at 8th logical page
ireturn;
