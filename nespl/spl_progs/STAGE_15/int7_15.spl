[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5;				//System call number for write system call is 5


alias userSP R0;
userSP = SP;


[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;				//Save the current value of User SP into the corresponding Process Table entry.

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;			// Setting SP to UArea Page number * 512 - 1


alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;


physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];					//userSP - 4 is the location of the argument 
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;

alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];



//to check if fd is valid or not 
if (fileDescriptor != -2)								//return value stored at mem location userSP-1 in userstack
then
	 alias physicalAddrRetVal R5;
	 physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	 [physicalAddrRetVal] = -1;							//return value = -1
else
	 alias word R5;
	 word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
	 //print word;
	 
	 
	 
	 multipush(R0,R1,R2,R3,R4,R5);
	 R1 = 3;
	 R2 = [SYSTEM_STATUS_TABLE+1];
	 R3 = word;
	 call MOD_4;
	 multipop(R0,R1,R2,R3,R4,R5);
	 
	 
	 
	 alias physicalAddrRetVal R6;
	 physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
 	 [physicalAddrRetVal] = 0;
endif;



SP = userSP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn;
