alias functionNum R1;
alias currentPID R2;

if (functionNum == 8) then							//acquire terminal
	while([TERMINAL_STATUS_TABLE] == 1) do					//if resource not available  current process = WAIT and invoke schedule
		[PROCESS_TABLE + 16*currentPID + 4] = WAIT_TERMINAL;
		multipush(R1, R2);
		call SCHEDULER;
		multipop(R1, R2);
	endwhile;
	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currentPID;
	return;
endif;


if (functionNum == 9) then							//release terminal
	if (currentPID != [TERMINAL_STATUS_TABLE + 1]) then
		R0 = -1;
		return;
	else
		[TERMINAL_STATUS_TABLE] = 0;
		alias i R3;
		i=1;
		while(i<16) do
			if (([PROCESS_TABLE +16*i+ 4] == WAIT_TERMINAL)) then		//wake up all process
                		[PROCESS_TABLE +16*i+ 4] = READY;
            		endif;
            		i=i+1;
            	endwhile;
            	R0=0;
            	return;
	endif;
endif;
