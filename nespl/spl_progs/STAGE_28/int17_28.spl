alias userSP R1;
alias sysCallNo R2;
alias pTable R3;
alias returnAddress R4;

pTable = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1]*16;
[pTable + 13]= SP;
SP = [pTable + 11] * 512  - 1 ;
PTBR = [pTable + 14] ;
userSP = [pTable + 13];
sysCallNo = [[PTBR + 2*((userSP-5)/512)] * 512 + ((userSP-5)%512)] ;
[pTable + 9] = sysCallNo;


multipush(R1,R2,R3);
R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1,R2,R3);

alias uName R5;
alias pwd R6;

uName = [[PTBR + 2*((userSP-4)/512)] * 512 + ((userSP-4)%512)] ;
pwd  = [[PTBR + 2*((userSP-3)/512)] * 512 + ((userSP-3)%512)] ;
returnAddress = [PTBR + 2*((userSP-1)/512)] * 512 + ((userSP-1)%512) ;

if(sysCallNo == 27) then				// login

    if([SYSTEM_STATUS_TABLE + 5*CORE + 1] != 1) then		//if not login process
        [returnAddress] = -2;
        goto KERN_IRET;
    endif;


    alias uTable R7;					//find user table entry to corresponding username
    alias i R8; 
    i = 0;
    uTable = -1;
    while(i < MAX_USER_NUM) do// 16
        if([USER_TABLE + i*2] == uName) then
            uTable = USER_TABLE + i*2;
            break;
        endif;
        i = i +1;
    endwhile;


    if(uTable == -1) then			//no entry exists
        [returnAddress] = -1;
        goto KERN_IRET;
    endif;

    encrypt pwd;				//encrypt entered password
    alias encryptedpwd R6;

    if(encryptedpwd != [uTable+1]) then		//check if it matches usertable entry
        [returnAddress] = -1;
        goto KERN_IRET;
    endif;



    [PROCESS_TABLE+ 16*2 + 4] = CREATED;	//shell process PID = 2
    [PROCESS_TABLE+ 16*2 + 3] = i;
    
    //login waits for shell proces to exit
    [pTable + 4] = WAIT_PROCESS;
    [pTable + 5] = 2;
    [SYSTEM_STATUS_TABLE] = i;


    multipush(R1,R2,R3,R4,R5,R6,R7); // Save the registers
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    
    call SCHEDULER;
    
    R1 = ACQUIRE_KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R1,R2,R3,R4,R5,R6,R7); // Restore the registers
endif;

KERN_IRET:
multipush(R3);
R1 = RELEASE_LOCK;
R2 = KERN_LOCK;
call ACCESS_CONTROL;
multipop(R3);

[pTable + 9] = 0;
SP = [pTable + 13];
ireturn;
