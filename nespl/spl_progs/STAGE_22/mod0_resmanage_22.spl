alias functionNum R1;
alias currentPID R2;


if (functionNum == 3) then									//acquire disk
	while([DISK_STATUS_TABLE] == 1) do
		[PROCESS_TABLE + 16*currentPID + 4] = WAIT_DISK;
		multipush(R1, R2);
		call SCHEDULER;
		multipop(R1, R2);
	endwhile;
	[DISK_STATUS_TABLE] = 1;
	[DISK_STATUS_TABLE + 4] = currentPID;
	return;
endif;

if (functionNum == 8) then
	while([TERMINAL_STATUS_TABLE] == 1) do
		[PROCESS_TABLE + 16*currentPID + 4] = WAIT_TERMINAL;
		multipush(R1, R2);
		call SCHEDULER;
		multipop(R1, R2);
	endwhile;
	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currentPID;
	return;
endif;

if( functionNum == 6) then							//acquire semaphore
	alias i R3;
	alias semTable R4;
	alias freeSem R5;
	freeSem=-1;
	while( i< 32) do							//check free entry in semaphore table
		semTable = SEMAPHORE_TABLE + (i*4);
		if ([semTable + 1] == 0) then
			freeSem = i;
			break;
		endif;
		i = i + 1;
	endwhile;
	if (freeSem == -1) then
		return;
	endif;
	[semTable] = -1;
	[semTable + 1] = 1;
	return;
endif;


if( functionNum == 7) then							//release semaphore
	alias semID R2;
	alias currentPID R3;
	alias semTable R4;
	semTable = SEMAPHORE_TABLE + (semID * 4);
	if([semTable] == currentPID) then					//check if current process is the process that locked the sempahore
		[semTable] = -1;
		alias i R5;
		i=0;
		while(i<16) do							//change (wait) to (ready)
			if(([PROCESS_TABLE +16*i+ 4] == WAIT_SEMAPHORE && [PROCESS_TABLE +16*i+ 5] == semTable )) then
				[PROCESS_TABLE + (16*i) + 4] = READY;
			endif;
			i = i + 1;
		endwhile;
		R0 = 0;
	else
		R0 = -1;
	endif;
	return;
endif;

if (functionNum == 9) then
	if (currentPID != [TERMINAL_STATUS_TABLE + 1]) then
		R0 = -1;
		return;
	else
		[TERMINAL_STATUS_TABLE] = 0;
		alias i R3;
		i=1;
		while(i<16) do
			if (([PROCESS_TABLE +16*i+ 4] == WAIT_TERMINAL)) then
                		[PROCESS_TABLE +16*i+ 4] = READY;
            		endif;
            		i=i+1;
            	endwhile;
            	R0=0;
            	return;
	endif;
endif;
